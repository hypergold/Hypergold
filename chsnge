@@ -50,6 +50,12 @@ const (
	// earlyVoteBitsValue is the only value of VoteBits allowed in a block
	// header before stake validation height.
	earlyVoteBitsValue = 0x0001
 	FraudProofNoCheck = 0
 	FraudProofKeyBlockCheck = 1
 	FraudProofMicroBlockCheck = 2
)
 var (
 @@ -1318,8 +1324,8 @@ func (b *BlockChain) CheckBlockStakeSanity(stakeValidationHeight int64, node *bl
// NOTE: The transaction MUST have already been sanity checked with the
// CheckTransactionSanity function prior to calling this function.
 func CheckTransactionInputs(chain *BlockChain, subsidyCache *SubsidyCache, tx *hcashutil.Tx, txKeyHeight int64, utxoView *UtxoViewpoint,
	checkFraudProof bool, chainParams *chaincfg.Params, keyHeightCache map[int64]int64) (int64, int64, int64, error) {
func CheckTransactionInputs(chain *BlockChain, subsidyCache *SubsidyCache, tx *hcashutil.Tx, txHeight int64, txKeyHeight int64, utxoView *UtxoViewpoint,
	checkFraudProofFlag uint32, chainParams *chaincfg.Params, keyHeightCache map[int64]int64) (int64, int64, int64, error) {
 	msgTx := tx.MsgTx()
 @@ -1756,7 +1762,7 @@ func CheckTransactionInputs(chain *BlockChain, subsidyCache *SubsidyCache, tx *h
			return 0, 0, 0, ruleError(ErrZeroValueOutputSpend, str)
		}
 		if checkFraudProof {
		if checkFraudProofFlag != FraudProofNoCheck {
			if txIn.ValueIn !=
				utxoEntry.AmountByIndex(originTxIndex) {
				str := fmt.Sprintf("bad fraud check value in "+
 @@ -1773,13 +1779,22 @@ func CheckTransactionInputs(chain *BlockChain, subsidyCache *SubsidyCache, tx *h
					txIn.BlockHeight, idx)
				return 0, 0, 0, ruleError(ErrFraudBlockHeight, str)
			}
 			if txIn.BlockIndex != utxoEntry.BlockIndex() {
				str := fmt.Sprintf("bad fraud check block "+
					"index (expected %v, given %v) for "+
					"txIn %v", utxoEntry.BlockIndex(),
					txIn.BlockIndex, idx)
				return 0, 0, 0, ruleError(ErrFraudBlockIndex, str)
			if checkFraudProofFlag == FraudProofKeyBlockCheck || txIn.BlockHeight != uint32(txHeight){
				if txIn.BlockIndex != utxoEntry.BlockIndex() {
					str := fmt.Sprintf("bad fraud check block "+
						"index (expected %v, given %v) for "+
						"txIn %v", utxoEntry.BlockIndex(),
						txIn.BlockIndex, idx)
					return 0, 0, 0, ruleError(ErrFraudBlockIndex, str)
				}
			} else{
				if txIn.BlockIndex != utxoEntry.BlockIndex() + 1 {
					str := fmt.Sprintf("bad fraud check block "+
						"index (expected %v, given %v) for "+
						"txIn %v", utxoEntry.BlockIndex(),
						txIn.BlockIndex, idx)
					return 0, 0, 0, ruleError(ErrFraudBlockIndex, str)
				}
